// Generated by CoffeeScript 1.8.0
var address, debug;

window.Cookie = (function() {
  function Cookie() {}

  Cookie.isCreated = function() {
    return document.cookie !== "";
  };

  Cookie.getUser = function() {
    var c;
    c = "user=";
    return document.cookie.substring(c.length, document.cookie.length);
  };

  return Cookie;

})();

debug = true;

$(document).on("keypress", "#errorGeoaddress", function(e) {
  if (e.keyCode === 13) {
    return $("#errorGeoaddressSubmit").click();
  }
});

window.LocationManager = (function() {
  function LocationManager() {}

  LocationManager.theaterPosition = "";

  LocationManager.Init = function(args) {
    if (debug) {
      console.log(args);
    }
    LocationManager.theaterPosition = args;
    User.SaveMovie(args);
    LocationManager.GetLocation(args);
  };

  LocationManager.GetLocation = function() {
    return $.ajax({
      type: "GET",
      url: "" + address + "/gmaps",
      data: {
        origin: "" + User.latitude + ", " + User.longitude,
        destination: "" + LocationManager.theaterPosition.lat + ", " + LocationManager.theaterPosition.long
      },
      success: function(msg) {
        var bound1, bound2, bounds, map, mapCanvas, mapOptions, northeast, path, poly, polyOptions, southwest, step, x, y, _i, _len, _ref;
        console.log(msg);
        northeast = msg.result.routes[0].bounds.northeast;
        southwest = msg.result.routes[0].bounds.southwest;
        bounds = new google.maps.LatLngBounds();
        bound1 = new google.maps.LatLng(northeast.lat, northeast.lng);
        bound2 = new google.maps.LatLng(southwest.lat, southwest.lng);
        x = (parseInt(User.latitude) + parseInt(LocationManager.theaterPosition.lat)) / 2;
        y = (parseInt(User.longitude) + parseInt(LocationManager.theaterPosition.long)) / 2;
        mapCanvas = document.getElementById('maps');
        mapOptions = {
          center: new google.maps.LatLng(x, y),
          zoom: 8,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(mapCanvas, mapOptions);
        bounds.extend(bound1);
        bounds.extend(bound2);
        polyOptions = {
          strokeColor: '#7F0000',
          strokeOpacity: 1.0,
          strokeWeight: 3
        };
        poly = new google.maps.Polyline(polyOptions);
        poly.setMap(map);
        path = poly.getPath();
        _ref = msg.result.routes[0].legs[0].steps;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          step = _ref[_i];
          path.push(new google.maps.LatLng(step.start_location.lat, step.start_location.lng));
          path.push(new google.maps.LatLng(step.end_location.lat, step.end_location.lng));
        }
        new google.maps.Marker({
          position: new google.maps.LatLng(msg.result.routes[0].legs[0].start_location.lat, msg.result.routes[0].legs[0].start_location.lng),
          map: map,
          title: 'Hello World!'
        });
        new google.maps.Marker({
          position: new google.maps.LatLng(msg.result.routes[0].legs[0].end_location.lat, msg.result.routes[0].legs[0].end_location.lng),
          map: map,
          title: 'Hello World!'
        });
        return map.fitBounds(bounds);
      },
      error: function(err) {
        return alert("location error");
      }
    });
  };

  LocationManager.GetLocationError = function(err) {
    if (err.code === 1) {
      return alert("Error: Access is denied!");
    } else if (err.code === 2) {
      return alert("Error: Position is unavailable!");
    } else {
      return console.log("error");
    }
  };

  LocationManager.GetocationFromPlace = function(coordinates) {
    return $.ajax({
      type: "GET",
      url: "https://maps.googleapis.com/maps/api/geocode/json",
      data: {
        address: coordinates
      },
      success: function(data) {
        if (debug) {
          console.log(data);
        }
        User.SetLocation(data.results[0].geometry.location.lat, data.results[0].geometry.location.lng);
        return $('#errorGeolocation').foundation('reveal', 'close');
      },
      error: function(err) {
        return console.log(err);
      }
    });
  };

  return LocationManager;

})();

address = "https://rihaninsta.herokuapp.com/";

$('#loading-image').bind('ajaxStart', function() {
  return $(this).show();
}).bind('ajaxStop', function() {
  return $(this).hide();
});

$(document).on("click", "#errorGeoaddressSubmit", function() {
  if ($("#errorGeolocation input").val() !== "") {
    return LocationManager.GetocationFromPlace($("#errorGeolocation input").val());
  }
});

window.ViewManager = (function() {
  function ViewManager() {}

  ViewManager.Init = function() {
    if ($("#header").children().length === 0) {
      $.get("./view/header.html", function(data) {
        return $("#header").html(data);
      });
    }

    /*$.get "./view/footer.html", (data) ->
    			$("#footer").html data
     */
    $.get("./view/home.html", function(data) {
      return $("#content").html(data);
    });
    return $("body").on("click", "a.viewmanager", function() {
      ViewManager.Load(this.classList[1]);
      return false;
    });
  };

  ViewManager.Load = function(pageName, args) {
    if (User.IsConnected()) {
      $("#bar-login-btn").addClass("hide");
      $("#bar-register-btn").addClass("hide");
      $("#bar-profil-btn").removeClass("hide");
    }
    if (pageName !== "home") {
      $("#header").children().remove();
    }
    $.get("./view/" + pageName + ".html", function(data) {
      return $("#content").html(data);
    });
    switch (pageName) {
      case "movie":
        return MovieManager.Init(args);
      case "location":
        return LocationManager.Init(args);
    }
  };

  return ViewManager;

})();

debug = true;

$(document).on("click", ".hour-list a", function() {
  var args, theaterInfos;
  theaterInfos = $(this).parents(".theater").children("input");
  args = {
    hour: $(this).html(),
    theater: $(this).parents(".theater").children("p.title").html(),
    long: theaterInfos.attr("attr-long"),
    lat: theaterInfos.attr("attr-lat"),
    movieid: $("#movieInfos input").val(),
    movietitle: $("#movieInfos h1").html()
  };
  if (debug) {
    console.log(args);
  }
  ViewManager.Load("location", args);
  return false;
});

window.MovieManager = (function() {
  function MovieManager() {}

  MovieManager.movienum = "";

  MovieManager.movieInfos = "";

  MovieManager.Init = function(args) {
    MovieManager.movienum = args["movienum"];
    return $.ajax({
      type: "GET",
      url: "" + address + "/cinema",
      data: {
        action: "api_request",
        type: "movie",
        code: MovieManager.movienum
      },
      success: function(msg) {
        MovieManager.movieInfos = msg.result.movie;
        return MovieManager.GetMovie();
      },
      error: function(err) {
        return alert("une erreur est survenue lors de la requÃªte sur les informations du film");
      }
    });
  };

  MovieManager.GetMovie = function() {
    return $.ajax({
      type: "GET",
      url: "" + address + "/cinema",
      data: {
        action: "api_request",
        type: "showtimelist",
        movie: MovieManager.movienum,
        lat: User.latitude,
        long: User.longitude
      },
      success: function(msg) {
        var base, currentElement, day, hour, place, show, showtime, theater, _i, _len, _ref, _results;
        if (debug) {
          console.log(msg.result.feed.theaterShowtimes);
          console.log(MovieManager.movieInfos);
        }
        base = $("#theater-list");
        base.append("<div class=\"small-12\" id=\"movieInfos\"><input type=\"hidden\" value=\"" + MovieManager.movieInfos.code + "\"/><h1>" + MovieManager.movieInfos.title + "</h1></div>");
        if (MovieManager.movieInfos.originalTitle !== void 0) {
          $("#movieInfos").append("<h2>" + MovieManager.movieInfos.originalTitle + "</h2>");
        }
        if (MovieManager.movieInfos.productionYear !== void 0) {
          $("#movieInfos>h1").append("<span> (" + MovieManager.movieInfos.productionYear + ")</span>");
        }

        /*if @movieInfos.trailerEmbed != undefined
        					$("#movieInfos").append(@movieInfos.trailerEmbed)
         */
        if (msg.result.feed.theaterShowtimes !== void 0) {
          _ref = msg.result.feed.theaterShowtimes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            theater = _ref[_i];
            base.append("<div class=\"theater small-6 columns\"></div>");
            currentElement = $(".theater").last();
            place = theater.place.theater;
            currentElement.append("<input type=\"hidden\" value=\"" + place.code + "\" attr-lat=\"" + place.geoloc.lat + "\" attr-long=\"" + place.geoloc.long + "\"/>");
            currentElement.append("<p class=\"title\">" + place.name + "</p>");
            currentElement.append("<div class=\"seance\">");
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = theater.movieShowtimes;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                show = _ref1[_j];
                _results1.push((function() {
                  var _k, _l, _len2, _len3, _ref2, _ref3, _results2;
                  _ref2 = show.scr;
                  _results2 = [];
                  for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                    day = _ref2[_k];
                    showtime = "<p class=\"day\">" + day.d + " (" + show.screenFormat.$ + ") : </p><div class=\"hour-list\">";
                    _ref3 = day.t;
                    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                      hour = _ref3[_l];
                      showtime += "<a href=\"#\">" + hour.$ + "</a> ";
                    }
                    showtime += "</div>";
                    _results2.push(currentElement.append(showtime));
                  }
                  return _results2;
                })());
              }
              return _results1;
            })());
          }
          return _results;
        } else {
          return base.append("<div>Aucune sÃ©ances trouvÃ©es dans les cinÃ©mas alentour.</div>");
        }
      },
      error: function(data, err) {
        console.log(data);
        return console.log(Error);
      }
    });
  };

  return MovieManager;

})();

$(document).on("click", "#search-button", function() {
  var tab;
  $("#header").children().remove();
  tab = {
    q: $("input#search-word").val(),
    filter: $("input[type=\"radio\"][checked=\"checked\"]").val()
  };
  if (tab["q"] !== "") {
    return Search.GetSearch(tab);
  }
});

$(document).on("keypress", "#search-word", function(e) {
  if (e.keyCode === 13) {
    return $("#search-button").click();
  }
});

$(document).on("click", ".pagination:not(.active)", function() {
  return Search.GetSearchPage($(this).attr("attr-id"));
});

$(document).on("click", ".showtime-btn", function() {
  var args;
  args = {
    movienum: $(this).attr("attr-code")
  };
  return ViewManager.Load("movie", args);
});

window.Search = (function() {
  function Search() {}

  Search.partner = "YW5kcm9pZC12M3M";

  Search.movielist = null;


  /*
  	URL: http://api.allocine.fr/xml/search
  	Parameters:
  		q: chaÃ®ne Ã  chercher (chaÃ®ne de caractÃ¨res)
  		partner: schÃ©ma XML Ã  utiliser en fonction des partenaires (1, 2, 3, 4)
  		json (optionnel): renvoie le rÃ©sultat au format JSON si json=1 (boolÃ©en)
  		count (optionnel): nombre de rÃ©sultats Ã  renvoyer (entier)
  		profile (optionnel): degrÃ© d'informations renvoyÃ©es (Ã©numÃ©ration : small, medium, large)
  		page (optionnel): numÃ©ro de la page de rÃ©sultats Ã  afficher (10 rÃ©sultats par page par dÃ©faut)
  		declare (optionnel): aucune idÃ©e !?
   */

  Search.GetSearch = function(tab) {
    var count, filter, json, page, q;
    json = 1;
    filter = tab["filter"];
    count = 5;
    page = tab["page"] || 1;
    q = tab["q"];
    return $.ajax({
      type: "GET",
      url: "" + address + "/cinema",
      data: {
        action: "api_request",
        type: "search",
        q: q,
        filter: filter,
        page: page,
        count: count
      },
      success: function(msg) {
        var element, i, isActive, movie, nbPage, title, _i, _j, _len, _ref, _results;
        $("#results #movie-results").html("<h1>RÃ©sultats</h1>");
        $("#search-error").remove;
        if (msg.result.feed.movie === void 0) {
          return $("#results #movie-results").append("<div id=\"search-error\">Aucun film trouvÃ©</div>");
        } else {
          _ref = msg.result.feed.movie;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            movie = _ref[_i];
            element = "<div class=\"movie-result\">";
            title = movie.originalTitle;
            if (movie.title !== void 0) {
              title = movie.title;
            }
            if (movie.productionYear === void 0) {
              element += "<p class=\"title\">" + title + "</p>";
            } else {
              element += "<p class=\"title\">" + title + " (" + movie.productionYear + ")</p>";
            }
            if (movie.castingShort !== void 0 && movie.castingShort.actors !== void 0) {
              element += "<p class=\"actors-label\">Acteurs : </p><p class=\"actors-value\">" + movie.castingShort.actors + "</p><br/>";
            }
            if (movie.castingShort !== void 0 && movie.castingShort.directors !== void 0) {
              element += "<p class=\"productor-label\">Directeur : </p><p class=\"productor-value\">" + movie.castingShort.directors + "</p><br/>";
            }
            element += "<a href=\"#\" attr-code=\"" + movie.code + "\" class=\"showtime-btn\">Voir les sÃ©ances</a>";
            element += "</div><hr/>";
            $("#results #movie-results").append(element);
          }
          nbPage = Math.ceil(msg.result.feed.totalResults / msg.result.feed.count);
          $("#results #pagination-zone").children().remove();
          _results = [];
          for (i = _j = 1; 1 <= nbPage ? _j < nbPage : _j > nbPage; i = 1 <= nbPage ? ++_j : --_j) {
            if (i === msg.result.feed.page) {
              isActive = "active";
            } else {
              isActive = "";
            }
            _results.push($("#results #pagination-zone").append("<a href=\"#\" class=\"pagination " + isActive + "\" attr-id=\"" + i + "\">" + i + "</a>"));
          }
          return _results;
        }
      },
      error: function(msg) {
        return alert("error");
      }
    });
  };

  Search.GetSearchPage = function(page) {
    var tab;
    tab = {
      q: $("input#search-word").val(),
      filter: $("input[type=\"radio\"][checked=\"checked\"]").val(),
      page: page
    };
    if (tab["q"] !== "") {
      return Search.GetSearch(tab);
    }
  };

  Search.GetMovieList = function() {
    return $.ajax({
      type: "GET",
      url: "" + address + "/cinema",
      data: {
        action: "api_request",
        type: "movielist",
        count: "25",
        filter: "nowshowing",
        page: "1",
        order: "datedesc"
      },
      success: function(msg) {
        var element, movie, _i, _len, _ref;
        if (msg.result.feed.movie !== void 0) {
          _ref = msg.result.feed.movie;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            movie = _ref[_i];
            element = "<div class=\"movie\">";
            element += "<p class=\"title\">" + movie.title + "</p>";
            element += "</div>";
            $(".weekly-movies").append(element);
          }
          return $(document).ready(function() {
            return $('.weekly-movies').slick({
              slidesToShow: 3
            }, {
              slidesToScroll: 3,
              autoplay: true,
              autoplaySpeed: 2000
            });
          });
        }
      },
      error: function(data, err) {
        var response;
        response = "Impossible d'Ã©tablir la connexion avec le serveur.";
        return $(".weekly-movies").append("<p class=\"error\">" + response + "</p>");
      }
    });
  };

  return Search;

})();

$(document).on("click", ".login-btn", function() {
  ViewManger.Load("login");
  return false;
});

$(document).on("click", "#valid-login-input", function() {
  User.GetConnection($("#login-input").val(), $("#password-input").val());
  return false;
});

$(document).on("click", "a.logout", function() {
  document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
  User.Logout();
  return false;
});

$(document).on("click", "a.register", function() {
  ViewnManager.Load("register");
  return false;
});

$(document).on("click", "#valid-register-input", function() {
  User.Register($("#login-input").val(), $("#password-input").val());
  return false;
});

$(document).on("click", "#bar-profil-btn #history", function() {
  return User.GetHistory();
});

window.User = (function() {
  function User() {}

  User.latitude;

  User.longitude;

  User.pseudo;

  User.Init = function() {
    if (navigator.geolocation) {
      return navigator.geolocation.getCurrentPosition(User.GeolocSuccess, User.GeolocError, {
        timeout: 1000
      });
    } else {
      return console.err("error");
    }
  };

  User.GeolocSuccess = function(position) {
    User.latitude = position.coords.latitude;
    return User.longitude = position.coords.longitude;
  };

  User.GeolocError = function() {
    var bloc;
    $('#errorGeolocation').children().remove();
    bloc = "<div> <h1>Une erreur est survenue</h1> <h2>Nous n'avons pas rÃ©ussi Ã  vous gÃ©olocaliser.</h2> <p>Pour pouvoir continuer Ã  utiliser notre site merci de bien vouloir entrer le nom de votre ville ou son code postal. Pour plus de prÃ©cision vous pouvez Ã©galement entrer une addresse. </p> <input type=\"text\" id=\"errorGeoaddress\" placeHolder=\"nom de ville, code postal, addresse, ...\"/> <div id=\"errorGeoaddressSubmit\" >Valider</div> </div>";
    $('#errorGeolocation').append(bloc);
    return $('#errorGeolocation').foundation('reveal', 'open');
  };

  User.SetLocation = function(latitude, longitude) {
    User.latitude = latitude;
    return User.longitude = longitude;
  };

  User.GetConnection = function(login, password) {
    return $.ajax({
      type: "POST",
      url: "" + address + "/user",
      data: {
        action: "login",
        login: login,
        password: password
      },
      success: function(msg) {
        User.pseudo = login;
        return ViewManager.Load("home");
      },
      error: function(msg) {
        return alert("error");
      }
    });
  };

  User.Logout = function() {
    document.cookie = "user=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
    User.pseudo = "";
    $("#bar-login-btn").removeClass("hide");
    $("#bar-register-btn").removeClass("hide");
    $("#bar-profil-btn").addClass("hide");
    return ViewManager.Load("home");
  };

  User.Register = function(login, password) {
    return $.ajax({
      type: "POST",
      url: "" + address + "/user",
      data: {
        action: "register",
        login: login,
        password: password
      },
      success: function(msg) {
        User.pseudo = login;
        return User.GetConnection(login, password);
      },
      error: function(msg) {
        return alert("error");
      }
    });
  };

  User.IsConnected = function() {
    if (Cookie.isCreated()) {
      return User.pseudo === Cookie.getUser();
    }
  };

  User.GetHistory = function() {
    return $.ajax({
      type: "GET",
      url: "" + address + "/cinema",
      data: {
        action: "user_list",
        type: "json"
      },
      success: function(msg) {
        return console.log(msg);
      },
      error: function(err) {
        return alert("error");
      }
    });
  };

  User.SaveMovie = function(args) {
    return $.ajax({
      type: "POST",
      url: "" + address + "/movie",
      data: {
        title: args.movietitle,
        movie_id: args.movieid,
        cine_lon: args.long,
        cine_lat: args.lat,
        cine_name: args.theater
      },
      success: function(msg) {
        return console.log(msg);
      },
      error: function(err) {
        return alert("error");
      }
    });
  };

  return User;

})();
